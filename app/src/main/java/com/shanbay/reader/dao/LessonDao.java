package com.shanbay.reader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shanbay.reader.model.bean.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lesson = new Property(1, String.class, "lesson", false, "LESSON");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Question = new Property(3, String.class, "question", false, "QUESTION");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property Word = new Property(6, String.class, "word", false, "WORD");
        public final static Property Chinese = new Property(7, String.class, "chinese", false, "CHINESE");
    }


    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LESSON\" TEXT," + // 1: lesson
                "\"TITLE\" TEXT," + // 2: title
                "\"QUESTION\" TEXT," + // 3: question
                "\"CONTENT\" TEXT," + // 4: content
                "\"ANSWER\" TEXT," + // 5: answer
                "\"WORD\" TEXT," + // 6: word
                "\"CHINESE\" TEXT);"); // 7: chinese
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lesson = entity.getLesson();
        if (lesson != null) {
            stmt.bindString(2, lesson);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(7, word);
        }
 
        String chinese = entity.getChinese();
        if (chinese != null) {
            stmt.bindString(8, chinese);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lesson = entity.getLesson();
        if (lesson != null) {
            stmt.bindString(2, lesson);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(7, word);
        }
 
        String chinese = entity.getChinese();
        if (chinese != null) {
            stmt.bindString(8, chinese);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lesson
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // question
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // word
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // chinese
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLesson(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWord(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChinese(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lesson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
